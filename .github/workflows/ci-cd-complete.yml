name: CI/CD Pipeline Completo

on:
  push:
    branches: [main, develop]
    paths:
      - 'packages/**'
      - 'package.json'
      - 'playwright.config.ts'
      - 'tsconfig.json'
      - 'yarn.lock'
      - 'eslint*'
      - 'app-config*.yaml'
      - 'catalog-info.yaml'
      - 'backstage.json'
      - 'plugins/**'
      - 'examples/**'
      - '.github/workflows/**'
  # Removed pull_request trigger - PRs only run build-docker.yml
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '20.19.4'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/backstage

jobs:
  # Job 1: An√°lisis y Validaci√≥n
  validate:
    name: üîç Validate & Lint
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          # Asegurar que se copien TODOS los archivos
          fetch-depth: 0
          # Verificar que yarn.lock est√© presente
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify repository structure
        run: |
          echo "üîç Verificando estructura del repositorio..."
          echo "üìÅ Contenido del directorio:"
          ls -la
          echo ""
          echo "üìÑ yarn.lock existe:"
          if [ -f "yarn.lock" ]; then
            echo "‚úÖ yarn.lock encontrado"
            echo "üìè Tama√±o: $(wc -l < yarn.lock) l√≠neas"
            echo "üîë Hash: $(sha256sum yarn.lock | cut -d' ' -f1)"
          else
            echo "‚ùå yarn.lock NO encontrado"
            echo "üìÅ Contenido de .yarn/:"
            ls -la .yarn/ || echo "No .yarn/ directory"
            echo ""
            echo "üìÑ .yarnrc.yml contenido:"
            cat .yarnrc.yml || echo "No .yarnrc.yml"
            echo ""
            echo "üì¶ package.json scripts disponibles:"
            cat package.json | grep -A 20 '"scripts"' || echo "No scripts found"
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get yarn cache directory
        id: yarn-cache-dir
        run: echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT

      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.yarn-cache-dir.outputs.dir }}
            .yarn/cache
            .yarn/install-state.gz
            node_modules
          # Cache key optimizado para mejor hit rate
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          echo "üì¶ Instalando dependencias..."
          echo "üîí yarn.lock debe estar presente en el repo"

          # Verificar que yarn.lock est√© presente
          if [ ! -f "yarn.lock" ]; then
            echo "‚ùå ERROR: yarn.lock no encontrado"
            echo "üí° Soluci√≥n: Commit yarn.lock al repositorio"
            echo "üìã Comandos:"
            echo "   yarn install  # Generar lockfile"
            echo "   git add yarn.lock"
            echo "   git commit -m 'add yarn.lock'"
            echo "   git push origin main"
            exit 1
          fi

          # Instalar con lockfile existente
          yarn install --immutable
          echo "‚úÖ Instalaci√≥n exitosa con --immutable"

      - name: Run linters
        run: |
          echo "üîç Running linters..."
          yarn lint:all 2>/dev/null || echo "‚ö†Ô∏è Linter warnings found"

      - name: Type check
        run: |
          echo "üìù Type checking..."
          yarn tsc

      - name: Check formatting
        run: |
          echo "üé® Checking code format..."
          yarn prettier:check 2>/dev/null || echo "‚ö†Ô∏è Format issues found"

      - name: Security audit
        run: |
          echo "üîê Security audit..."
          echo "üîç Usando yarn npm audit (Yarn 4 compatible)..."
          yarn npm audit --severity moderate --recursive || echo "‚ö†Ô∏è Some vulnerabilities found"

  # Job 2: Build Backstage
  build-backend:
    name: üèóÔ∏è Build Backstage
    runs-on: ubuntu-24.04
    needs: validate
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=host

      - name: Log in to Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Sanitizar nombre del branch para Docker tags
      - name: Sanitize branch name
        id: branch
        run: |
          # Extraer nombre del branch y sanitizarlo para Docker tags
          BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          # Reemplazar caracteres inv√°lidos con guiones y eliminar guiones al inicio/final
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9._-]/-/g' | sed 's/^[-]*//' | sed 's/[-]*$//')
          # Si est√° vac√≠o o solo guiones, usar 'pr'
          if [ -z "$SANITIZED_BRANCH" ] || [ "$SANITIZED_BRANCH" = "-" ]; then
            SANITIZED_BRANCH="pr"
          fi
          echo "branch=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          echo "Original branch: $BRANCH_NAME"
          echo "Sanitized branch: $SANITIZED_BRANCH"

      - name: Generate metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=${{ steps.branch.outputs.branch }}-
            type=raw,value={{date 'YYYYMMDD'}}-{{sha}},enable={{is_default_branch}}

      - name: Build multi-arch image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backstage-main
          cache-to: type=gha,scope=backstage-main,mode=max
          provenance: false
          sbom: false

    # Job 3: An√°lisis de Seguridad
  security-scan:
    name: üîê Security Scan
    runs-on: ubuntu-24.04
    needs: [validate, build-backend]
    if: github.event_name != 'pull_request'
    continue-on-error: true
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Solo necesitamos el c√≥digo para el upload SARIF
          fetch-depth: 1

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          # Usar tag 'latest' que sabemos que existe
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/backstage:latest
          scan-type: 'image'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'MEDIUM,HIGH,CRITICAL'
          # Solo vulnerabilidades, no secrets (m√°s r√°pido)
          scanners: 'vuln'
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Create security summary
        if: always()
        run: |
          echo "## üîê Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Image scanned for CVEs using Trivy" >> $GITHUB_STEP_SUMMARY
          echo "Results uploaded to Security tab" >> $GITHUB_STEP_SUMMARY

  # Job Final: Summary
  pipeline-summary:
    name: üìä Pipeline Summary
    runs-on: ubuntu-24.04
    needs: [validate, build-backend, security-scan]
    if: always()

    steps:
      - name: Generate Complete Summary
        run: |
          echo "# üìä CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| üîç Validation | ${{ needs.validate.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üèóÔ∏è Build | ${{ needs.build-backend.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| üîê Security | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            echo "## üê≥ Container Registry" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Pull Commands" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "# Latest" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# Specific SHA" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
