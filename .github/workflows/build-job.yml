name: Build Job

on:
  workflow_call:
    inputs:
      node-version:
        description: "Node.js version"
        required: false
        type: string
        default: "20.19.5"
      registry:
        description: "Container registry"
        required: false
        type: string
        default: "ghcr.io"
    outputs:
      image-digest:
        description: "Docker image digest"
        value: ${{ jobs.build.outputs.digest }}
      image-tags:
        description: "Docker image tags"
        value: ${{ jobs.build.outputs.tags }}

env:
  REGISTRY: ${{ inputs.registry || 'ghcr.io' }}
  IMAGE_NAME: ${{ github.repository_owner }}/backstage
  NODE_VERSION: ${{ inputs.node-version || '20.19.5' }}

jobs:
  build:
    name: 🏗️ Build Container Image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write # Para provenance
      attestations: write # Para SBOM
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Generar metadata inteligente para tags y labels
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Tag 'latest' solo en main o tags versionados
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=latest,enable=${{ startsWith(github.ref, 'refs/tags/v') }}
            # Tags versionados desde semantic-release (v1.2.3)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,format=short,prefix=
          labels: |
            org.opencontainers.image.title=Backstage
            org.opencontainers.image.description=Backstage Service Catalog
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            maintainer=${{ github.repository_owner }}

      # Build y push multi-arch con todas las optimizaciones
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: packages/backend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # ✅ Supply Chain Security habilitada
          provenance: true
          sbom: true
          # Cache optimizado (solo GHA, más rápido)
          cache-from: type=gha,scope=backstage-build
          cache-to: type=gha,scope=backstage-build,mode=max
          # Build args
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            NODE_ENV=production

      # Summary mejorado con información del build
      - name: Build summary
        run: |
          echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry**: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "**Image**: ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "**Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Tags Created" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🐳 Pull Commands" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "# By digest (immutable, most secure)" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "# By latest tag" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "# By version tag" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "# By short SHA (7 chars)" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Multi-arch (AMD64 + ARM64)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Provenance attestation (SLSA)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SBOM (Software Bill of Materials)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ BuildKit cache optimization" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smart tagging (short SHA)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ OCI compliant labels" >> $GITHUB_STEP_SUMMARY
