name: CI/CD Pipeline Centralizado

on:
  push:
    branches: [main, develop]
    tags:
      - "v*.*.*" # Trigger en tags de semantic-release (v1.2.3)
  pull_request:
    branches: [main, develop]
  release:
    types: [created]

env:
  NODE_VERSION: "20.19.5"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/backstage

jobs:
  # Job 1: Validations
  validations:
    name: 🔍 Code Quality
    uses: ./.github/workflows/validate-job.yml

  # Job 2: Semantic Release (solo en push a main/develop, no en tags)
  semantic-release:
    name: 📦 Semantic Release
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') && !startsWith(github.ref, 'refs/tags/')
    needs: validations
    uses: ./.github/workflows/release.yml
    secrets: inherit

  # Job 3: Container Build
  build:
    name: 🏗️ Build
    if: |
      always() && 
      needs.validations.result == 'success' && 
      (needs.semantic-release.result == 'success' || needs.semantic-release.result == 'skipped') &&
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    needs: [validations, semantic-release]
    uses: ./.github/workflows/build-job.yml
    with:
      release-version: ${{ needs.semantic-release.outputs.new-release-version }}

  # Job 4: Security Scan (ahora recibe el digest del build)
  security-scan:
    name: 🔐 Security Scan
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    needs: build
    uses: ./.github/workflows/security-job.yml
    with:
      image-digest: ${{ needs.build.outputs.image-digest }}

  # Job Final: Summary
  pipeline-summary:
    name: 📊 Summary
    runs-on: ubuntu-24.04
    needs: [validations, semantic-release, build, security-scan]
    if: always()

    steps:
      - name: Generate Dynamic Summary
        run: |
          echo "# 📊 Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determinar tipo de pipeline
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "**Pipeline Type**: 🔍 PR Validation Only" >> $GITHUB_STEP_SUMMARY
            echo "**PR**: #${{ github.event.number }}" >> $GITHUB_STEP_SUMMARY
            echo "**Branch**: ${{ github.head_ref }}" >> $GITHUB_STEP_SUMMARY
            echo "**Target**: ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == refs/heads/main ]]; then
              echo "**Pipeline Type**: 🚀 Full Pipeline (Main Branch)" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ github.ref }}" == refs/heads/develop ]]; then
              echo "**Pipeline Type**: 🏗️ Full Pipeline (Develop Branch)" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
              echo "**Pipeline Type**: 📦 Versioned Release (Semantic Release)" >> $GITHUB_STEP_SUMMARY
              echo "**Version**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
            fi
          fi

          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation | ${{ needs.validations.result }} |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "push" ]]; then
            # Mostrar semantic-release solo si no es un tag
            if [[ "${{ github.ref }}" != refs/tags/* ]]; then
              echo "| 📦 Semantic Release | ${{ needs.semantic-release.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
            fi
            echo "| 🏗️ Build | ${{ needs.build.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY
            echo "| 🔐 Security Scan | ${{ needs.security-scan.result || 'skipped' }} |" >> $GITHUB_STEP_SUMMARY

            # Mostrar digest si está disponible
            if [[ -n "${{ needs.build.outputs.image-digest }}" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "## 🐳 Container Image" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Digest**: \`${{ needs.build.outputs.image-digest }}\`" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Pull Command (by digest - immutable)" >> $GITHUB_STEP_SUMMARY
              echo '```bash' >> $GITHUB_STEP_SUMMARY
              echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| 🏗️ Build | ⏭️ Skipped (PR only)" >> $GITHUB_STEP_SUMMARY
            echo "| 🔐 Security Scan | ⏭️ Skipped (PR only)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "## ✨ Pipeline Features" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔍 Validation Stage" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Artifact sharing (node_modules reused)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Parallel execution (tests + linting)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Dependency review (PRs only)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit tests with coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "### 🏗️ Build Stage" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Multi-arch (AMD64 + ARM64)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Provenance attestation (SLSA)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ SBOM generation" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Smart tagging (metadata-action)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ BuildKit cache optimization" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🔐 Security Stage" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Scan by digest (immutable)" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Vulnerability + config scan" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ SARIF upload to Security tab" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "## 🔄 Reused Workflows" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Validation**: Reused from \`validate-job.yml\`" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "push" ]]; then
            echo "- ✅ **Build**: Reused from \`build-job.yml\`" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ **Security Scan**: Reused from \`security-job.yml\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⏭️ **Build**: Skipped (PR only)" >> $GITHUB_STEP_SUMMARY
            echo "- ⏭️ **Security Scan**: Skipped (PR only)" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "**Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
